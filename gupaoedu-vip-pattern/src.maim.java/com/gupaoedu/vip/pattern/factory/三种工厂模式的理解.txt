简单工厂：
1.不需要关心类的创建细节。
2.减轻类之间的耦合依赖，具体类的实现只是依赖于简单工厂，而不依赖其他类。

3.扩展复杂，当简单工厂需要生产出另外一种产品的时候，需要扩展工厂的内部创建逻辑，比较有可能引起较大的故障
4.由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中

工厂方法：
（1）工厂方法模式就很好的减轻了工厂类的负担，把某一类/某一种东西交由一个工厂生产；
（2）同时增加某一类”东西“并不需要修改工厂类，只需要添加生产这类”东西“的工厂即可，使得工厂类符合开放-封闭原则。
（3）但是生成某个产品就需要建某个工厂，工厂会越来越多

抽象工厂：
1、对于生成产品族很方便，但是增加新的产品还得修改类，不符合开闭原则
